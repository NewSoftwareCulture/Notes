# От джуна до сеньора. Как стать востребованным разработчиком (Владимир Швец)

## Ревью
#ревью

Проходя код-ревью, постарайтесь забыть, что этот код ваш, и обьективно воспринять комментарии, которые вам напишут.

- В ходе код-ревью не обороняйтесь и не нападайте, это не битва.
- Абстрагируйтесь от кода и стиля, сосредоточившись на логике написаного.

#красный_флаг

Однажды ко мне обратился друг с просьбой посмотреть, правильно ли проходит его код-ревью. В то время он как раз устро-ился в новую компанию и его работу часто проверяли коллеги.

Он пожаловался, что сам тон комментариев и претензии, которые они предьявляют, звучат агрессивно и неприятно. Сначала я не воспринял ситуацию всерьез, подумал что проблема пре-увеличена, но желание помочь взяло верх и я ознакомился с комментариями к его коду. «Побивание камнями», пожалуй, самое мягкое сравнение, которое приходит мне на ум.

Я не знаю, с чем был связан этот разгул немотивированной агрессии по отношению к новому человеку в команде, но в тот момент ситуация расстроила меня настолько, что я, на тот момент уже будучи lead-разработчиком, попросил друга предоставить мне слово на код-ревью. Я высказал все, что думаю о таком отношении внутри команды и о самой политике компании, которая это поощряет, после чего искренне посоветовал другу сменить место работы. Порой есть смысл тратить время и силы, чтобы попробовать изменить положение к лучшему, но эта ситуация была из разряда «собирай вещи и беги»

## Профилирование
#профилирование

Профилируйте, чтобы понять, насколько эффективно ваше приложение!

## Цена ошибки
#ответственность

Моя самая дорогая ошибка обошлась бы мне в 3 миллиона рублей плюс сильный удар по репутации. Я занимался разработкой системы биллинга, и из-за досадной цепочки моих недосмотров были утеряны - данные платежей пользователей за сутки. Ситуация складывалась весьма неприятная, но у меня был запас времени: до момента, когда компания собиралась сделать заявление и рассылку с извинениями, оставалось два выходных дня. Это были крайне непростые два дня, за которые я все же сумел придумать и написать решение, способное восстановить историю покупок, хоть и с опозданием. Старайтесь воспринимать все свои ошибки серьезно. Какие-то обойдутся вам легко - только в то, что, обнаружив их, вы скажете «ОЙ». А другие станут очень ценным (иногда буквально) опытом, про который вы никогда не забудете.

## Оптимизация
#оптимизация

В вопросах оптимизации необходимо идти от обратного: не от отсутствия кода к его появлению, а от существующего кода к его упрощению и ускорению.

1. **Профилирование**
   Прежде чем приступать к любой оптимизации, следует как минимум сделать профилирование кода.
2. **Приоритетность**
   В реальных проектах приоритет оптимизации не всегда будет определяться с очевидностью. Например: что лучше оптимизировать - менее производительный или более популярный (с точки зрения пользователей) кусок кода?
3. **Цена оптимизации**
   Задача оптимизации - сделать код максимально продуктивным, и у этого есть цена, которую вы должны заплатить. Оптимизация часто приводит код к менее логичному виду, иногда усложняет его, иногда чрезмерно упрощает, лишая его абстракций, элегантных решений.

## Оценка задачи
#оценка_задачи

1. **Требования**
   Задайте максимум вопросов по задаче, проведите анализ кода, который будет изменен, поговорите со старшими разработчиками.
   
   Ограничьте время анализа по конкретным вопросам, иначе вы рискуете столкнуться с аналитическим шоком и неспособностью принять решение.
   
   Требования могут постоянно меняться и усложняться. (актуально для стартапов или новых проектов)
2. **Декомпозиция**
   Если перед вами объемная, сложная задача, разбейте ее на несколько небольших, проанализируйте каждую из них и решите, стоит ли разделить и их на более мелкие.
   Чаще всего в крупных компаниях есть некоторое соглашение: к примеру, если предполагается, что задача займет больше 16 часов работы, то ее стоит разбить на подзадачи.
3. **Риски**
   Понимание рисков будет складываться из следующих факторов:
- Опыт решения таких задач в прошлом
- Особенности проекта (то, что поначалу выглядит как замена надписи на кнопке, вполне может вылиться в исправления в ядре приложения)
  Помочь с рисками могут коэффициенты
4. **Тестирование**
   Всегда закладывайте дополнительное время на написание тестов для реализуемой задачи и ее проверки!!!
5. **Взаимодействие**
   Не самый очевидный, но от этого не менее важный пункт.
   Дейли, миты, обеды и прочие около-рабочие мероприятия съедают достаточно много времени
6. **Коэффициенты** 
   Финальное действие - это применение коэффициентов.
   Не пытаятесь никого впечатлить низкими оценками. НИКОГДА!!! Задачу лучше переоценить, чем недооценить.

## Методологии
#методологии

Эффективнее всего клеить САМЫЕ ВАЖНЫЕ напоминания на монитор стикерами с написанным от руки текстом.

Кроме того, следует вести письменные заметки во время технических обсуждений, чтобы разгружать голову и быть уверенным, что ничего важного не забудется.

## Забота о себе
#самочувствие

Ваше внутреннее состояние - залог качественной работы.

Самочувствие сказывается на ней больше, чем вы можете себе представить.

Отмечайте то, что вас радует. Возможно, это новые проекты, сложные задачи, какие-то конкретные технологии или направления разработки. А может, вы радуетесь, когда гладите страуса или готовите домашнюю пиццу. Какая-нибудь мелочь, которая делает счастливым лично вас, может дать вам мотивацию на неделю работы вперед. Замечайте это, запоминайте то, что дает вам силы.

Быть разработчиком сложно - это требует очень больших затрат энергии как тела, так и мозга. Не пренебрегайте сигналами от организма, не забывайте нормально питаться и спать: следите за тем, как и сколько вы отдыхаете от новой информации.


## Трудности
#самочувствие

- Мы в ответе за то, как реагируем на жизненные события.
- Учитесь реагировать так, как хотели бы, а не так, как получается.
- Не позволяйте событиям управлять вашей жизнью, какие бы трудности они за собой ни влекли.

## Работа под давлением
#свои_мысли

Как вести разработку в сжатые сроки или в условиях неопределенности?

1. Понять бизнес-задачу
2. Узнать дизайн (хотя бы черновой)
3. Сделать заглушку за 1-2 дня
4. Улучшить заглушку до уровня MVP на малых объемах за 3-4 дня
5. Улучшать, расширять и оптимизировать до дедлайна

---------------
В идеале действовать немного иначе:

1. Понять бизнес-задачу
2. Узнать дизайн (хотя бы черновой)
3. Согласовать и получить (в крайнем случае реализовать + апрувнуть) приемочные тесты
4. Contract first principle (согласовать контракт для API)
5. Подготовить mock-data для фронтов (1d)
6. Далее двигаться по TDD
7. Улучшить заглушку до уровня MVP на малых объемах (3-4d)
8. Улучшать, расширять и оптимизировать до дедлайна


## Не опускай руки
#самочувствие 

Viam supervadet vadens -  Дорогу осилит идущий (лат.)
